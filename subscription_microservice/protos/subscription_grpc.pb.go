// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/subscription.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	GetPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SubscriptionService_GetPlansClient, error)
	GetPlan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanInfo, error)
	SortPlans(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (SubscriptionService_SortPlansClient, error)
	SubscribePlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	CancelPlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	RenewPlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	GetAllSubscriptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SubscriptionService_GetAllSubscriptionsClient, error)
	GetUserSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserSubscriptionsClient, error)
	GetUserActiveSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserActiveSubscriptionsClient, error)
	GetUserPreviousSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserPreviousSubscriptionsClient, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SubscriptionService_GetPlansClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[0], "/subscription.SubscriptionService/GetPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetPlansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetPlansClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceGetPlansClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetPlansClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetPlan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanInfo, error) {
	out := new(PlanInfo)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionService/GetPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SortPlans(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (SubscriptionService_SortPlansClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[1], "/subscription.SubscriptionService/SortPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSortPlansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SortPlansClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceSortPlansClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSortPlansClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) SubscribePlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionService/SubscribePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CancelPlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionService/CancelPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) RenewPlan(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/subscription.SubscriptionService/RenewPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetAllSubscriptions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SubscriptionService_GetAllSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[2], "/subscription.SubscriptionService/GetAllSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetAllSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetAllSubscriptionsClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceGetAllSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetAllSubscriptionsClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetUserSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[3], "/subscription.SubscriptionService/GetUserSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUserSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUserSubscriptionsClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceGetUserSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUserSubscriptionsClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetUserActiveSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserActiveSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[4], "/subscription.SubscriptionService/GetUserActiveSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUserActiveSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUserActiveSubscriptionsClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceGetUserActiveSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUserActiveSubscriptionsClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetUserPreviousSubscriptions(ctx context.Context, in *ID, opts ...grpc.CallOption) (SubscriptionService_GetUserPreviousSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[5], "/subscription.SubscriptionService/GetUserPreviousSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUserPreviousSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUserPreviousSubscriptionsClient interface {
	Recv() (*PlanInfo, error)
	grpc.ClientStream
}

type subscriptionServiceGetUserPreviousSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUserPreviousSubscriptionsClient) Recv() (*PlanInfo, error) {
	m := new(PlanInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	GetPlans(*Empty, SubscriptionService_GetPlansServer) error
	GetPlan(context.Context, *PlanRequest) (*PlanInfo, error)
	SortPlans(*SortRequest, SubscriptionService_SortPlansServer) error
	SubscribePlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error)
	CancelPlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error)
	RenewPlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error)
	GetAllSubscriptions(*Empty, SubscriptionService_GetAllSubscriptionsServer) error
	GetUserSubscriptions(*ID, SubscriptionService_GetUserSubscriptionsServer) error
	GetUserActiveSubscriptions(*ID, SubscriptionService_GetUserActiveSubscriptionsServer) error
	GetUserPreviousSubscriptions(*ID, SubscriptionService_GetUserPreviousSubscriptionsServer) error
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) GetPlans(*Empty, SubscriptionService_GetPlansServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlans not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetPlan(context.Context, *PlanRequest) (*PlanInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) SortPlans(*SortRequest, SubscriptionService_SortPlansServer) error {
	return status.Errorf(codes.Unimplemented, "method SortPlans not implemented")
}
func (UnimplementedSubscriptionServiceServer) SubscribePlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribePlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) CancelPlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) RenewPlan(context.Context, *SubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetAllSubscriptions(*Empty, SubscriptionService_GetAllSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUserSubscriptions(*ID, SubscriptionService_GetUserSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUserActiveSubscriptions(*ID, SubscriptionService_GetUserActiveSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserActiveSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUserPreviousSubscriptions(*ID, SubscriptionService_GetUserPreviousSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserPreviousSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetPlans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetPlans(m, &subscriptionServiceGetPlansServer{stream})
}

type SubscriptionService_GetPlansServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceGetPlansServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetPlansServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionService/GetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetPlan(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SortPlans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SortRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).SortPlans(m, &subscriptionServiceSortPlansServer{stream})
}

type SubscriptionService_SortPlansServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceSortPlansServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSortPlansServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_SubscribePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SubscribePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionService/SubscribePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SubscribePlan(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CancelPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CancelPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionService/CancelPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CancelPlan(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_RenewPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).RenewPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionService/RenewPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).RenewPlan(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetAllSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetAllSubscriptions(m, &subscriptionServiceGetAllSubscriptionsServer{stream})
}

type SubscriptionService_GetAllSubscriptionsServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceGetAllSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetAllSubscriptionsServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetUserSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUserSubscriptions(m, &subscriptionServiceGetUserSubscriptionsServer{stream})
}

type SubscriptionService_GetUserSubscriptionsServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceGetUserSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUserSubscriptionsServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetUserActiveSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUserActiveSubscriptions(m, &subscriptionServiceGetUserActiveSubscriptionsServer{stream})
}

type SubscriptionService_GetUserActiveSubscriptionsServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceGetUserActiveSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUserActiveSubscriptionsServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetUserPreviousSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUserPreviousSubscriptions(m, &subscriptionServiceGetUserPreviousSubscriptionsServer{stream})
}

type SubscriptionService_GetUserPreviousSubscriptionsServer interface {
	Send(*PlanInfo) error
	grpc.ServerStream
}

type subscriptionServiceGetUserPreviousSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUserPreviousSubscriptionsServer) Send(m *PlanInfo) error {
	return x.ServerStream.SendMsg(m)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlan",
			Handler:    _SubscriptionService_GetPlan_Handler,
		},
		{
			MethodName: "SubscribePlan",
			Handler:    _SubscriptionService_SubscribePlan_Handler,
		},
		{
			MethodName: "CancelPlan",
			Handler:    _SubscriptionService_CancelPlan_Handler,
		},
		{
			MethodName: "RenewPlan",
			Handler:    _SubscriptionService_RenewPlan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlans",
			Handler:       _SubscriptionService_GetPlans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SortPlans",
			Handler:       _SubscriptionService_SortPlans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllSubscriptions",
			Handler:       _SubscriptionService_GetAllSubscriptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserSubscriptions",
			Handler:       _SubscriptionService_GetUserSubscriptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserActiveSubscriptions",
			Handler:       _SubscriptionService_GetUserActiveSubscriptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserPreviousSubscriptions",
			Handler:       _SubscriptionService_GetUserPreviousSubscriptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/subscription.proto",
}
